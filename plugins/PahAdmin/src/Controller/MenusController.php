<?php
namespace PahAdmin\Controller;

use App\Controller\API\StringAPI;
use Cake\Network\Exception\NotFoundException;
use Cake\Validation\Validator;

/**
 * Class MenusController
 * @package App\Controller
 */
class MenusController extends AdminController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Menus');
    }

    public function index() {}

    public function datatables() {
        $this->response = $this->response->withHeader('Content-Type', 'application/json');

        $params = $this->_parse_datatables_params();

        /** @var \App\Model\Entity\Menu[] $menus */
        $menus_query = $this->Menus->find();

        $params['recordsFiltered'] = $params['recordsTotal'] = $menus_query->count();

        $menus_query->orderDesc('created')
            ->where([
                'title LIKE' => '%' . $params['keyword'] . '%',
            ])
            ->limit($params['length'])->offset($params['start']);

        $menus = $menus_query->toArray();

        $params['data'] = $menus;

        $this->response = $this->response->withStringBody( json_encode( $params ) );
        return $this->response;
    }

    /**
     * Edit method
     *
     * @param string|null $id Menu id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null) {
        $request = $this->request;
        /** @var \App\Model\Entity\Menu $menu */
        if ( $id ) {
            $menu = $this->Menus->find()
                ->where([
                    'id' => $id,
                ])
                ->first();
        } else {
            $menu = $this->Menus->newEntity();
        }

        $this->set(compact('menu', 'menus'));

        if($this->request->is(['post', 'put', 'patch'])) {

            $data = $request->getData();

            // Data processing
            $validator = new Validator();

            $validator
                ->requirePresence('title')
                ->notEmpty('title');

            $errors = $validator->errors($this->request->getData());

            if($errors) {
                throw new NotFoundException('Invalid request!');
            }
            $menu->title = $data['title'];
            $menu->child_menu = $data['child_menu'];
            $menu->slug = StringAPI::convertToAscii($data['title']);
            $menu->dsp_order = $data['dsp_order'];

            if ($this->Menus->save($menu)) {
                $this->Flash->success(__('The user has been saved.'), ['key' => 'menus_key']);

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'), ['key' => 'menus_key']);
        }
    }

    /**
     * @return array
     */
    protected function _parse_datatables_params() {
        $params = array(
            'start' => floor($this->request->getQuery('start')),
            'length' => floor($this->request->getQuery('length')),
            'draw' => floor($this->request->getQuery('draw')),
        );

        if($params['length'] > 200) {
            $params['length'] = 50;
        }

        $search = $this->request->getQuery('search'); //value: value search, regex: true/false
        $order = $this->request->getQuery('order');

        $params['direction'] = $params['column_ordered'] = false;
        if($order && isset($order[0])) {
            if(isset($order[0]['column'])) {
                $params['column_ordered'] = $order[0]['column']; // Direction, not need to validate
            }

            if(isset($order[0]['dir'])) {
                $params['direction'] = $order[0]['dir']; // Direction, not need to validate
            }
        };

        $params['keyword'] = false;
        if(isset($search['value']) && $search['value'] != "" && strlen($search['value']) < 250) {
            $params['keyword'] = $search['value'];
        };

        return $params;
    }

    /**
     * @param null $id
     * @return string
     */
    public function delete($id = null)
    {
        $this->response = $this->response->withType('application/json');
        if($this->request->is(['post', 'delete'])) {
            /** @var \App\Model\Entity\Menu $menu */
            $menu = $this->Menus->find()
                ->where([
                    'id' => intval($id)
                ])
                ->first();

            if ($this->Menus->delete($menu)) {
                $this->response = $this->response->withStringBody(json_encode([
                    'status' => 200
                ]));

                return $this->response;
            }
        }

        $this->response = $this->response->withStringBody(json_encode([
            'status' => 201,
            'message' => 'Invalid request'
        ]));

        return $this->response;
    }
}
